# Create comprehensive table of health parameters for elderly monitoring
import pandas as pd
import numpy as np

# Comprehensive health monitoring parameters table
health_monitoring_data = {
    'Параметр_Здоровья': [
        # Voice/Audio Parameters
        'Когнитивное снижение', 'Депрессия', 'Тревожность', 'Настроение (ежедневно)',
        'Речевые паттерны', 'Синдром хрупкости', 'Одиночество', 'Качество сна (опрос)',
        'Социальная активность', 'Боль/дискомфорт',
        
        # Camera/Vision Parameters  
        'Пульс (rPPG)', 'Частота дыхания', 'Выражение лица/эмоции', 'Детекция падений',
        'Анализ походки', 'Саркопения (BMI лица)', 'Кровяное давление', 'Уровень активности',
        'Лицевая асимметрия (инсульт)', 'Тремор/движения',
        
        # Multimodal Parameters
        'Общее самочувствие', 'Соблюдение лекарств', 'Экстренные ситуации', 'Качество жизни',
        'Семейные отношения'
    ],
    
    'Технология_Мониторинга': [
        # Voice/Audio
        'Аудио + GPT-4o', 'Аудио + GPT-4o', 'Аудио + Claude 3.5', 'Аудио + GPT-4o',
        'Whisper + GPT-4', 'Аудио + Claude 3.5', 'Разговор + GPT-4o', 'Разговор + анализ',
        'Разговор + GPT-4', 'Аудио тон + GPT-4o',
        
        # Camera/Vision
        'Камера + GPT-4V', 'Камера + GPT-4V', 'Камера + GPT-4V', 'Камера + Gemini Vision',
        'Камера + GPT-4V', 'Камера + анализ лица', 'Камера + Gemini Pro', 'Камера + детекция движения',
        'Камера + GPT-4V медицинский', 'Камера + анализ движения',
        
        # Multimodal
        'GPT-4o + GPT-4V + Claude', 'Камера + голосовые напоминания', 'Мультимодальный ИИ', 'Голос + видео анализ',
        'Анализ разговоров + поведения'
    ],
    
    'Метод_Сбора_Данных': [
        # Voice/Audio
        'Ежедневный разговор 5-10 мин', 'Беседа о настроении', 'Тональность голоса', 'Ежедневный чек-ин',
        'Автоматический анализ речи', 'Голосовые биомаркеры', 'Социальные вопросы', 'Вечерние вопросы',
        'Рассказ о дне', 'Описание самочувствия',
        
        # Camera/Vision  
        '60-сек видео лица', '30-сек видео груди', 'Анализ мимики', 'Постоянное видеонаблюдение',
        '30-сек видео ходьбы', 'Фото лица для BMI', '90-сек видео лица', 'Детекция движений',
        'Анализ симметрии лица', 'Видео рук/движений',
        
        # Multimodal
        'Голос + видео + контекст', 'Камера + голосовые напоминания', 'Многоканальный мониторинг', 'Комплексная оценка',
        'Анализ взаимодействий'
    ],
    
    'Точность_Ожидаемая': [
        # Voice/Audio
        '75-85%', '70-80%', '75-82%', '80-90%',
        '80-90%', '65-75%', '70-85%', '75-85%',
        '85-90%', '70-80%',
        
        # Camera/Vision
        '70-80%', '75-85%', '80-85%', '80-90%',
        '70-80%', '70-85%', '60-70%', '85-95%',
        '85-95%', '75-85%',
        
        # Multimodal
        '80-90%', '85-95%', '85-95%', '75-90%',
        '80-90%'
    ],
    
    'Важность_для_Пожилых': [
        # Voice/Audio
        'Критическая', 'Высокая', 'Высокая', 'Высокая',
        'Высокая', 'Критическая', 'Критическая', 'Высокая',
        'Высокая', 'Высокая',
        
        # Camera/Vision
        'Критическая', 'Высокая', 'Средняя', 'Критическая',
        'Высокая', 'Высокая', 'Средняя', 'Высокая',
        'Критическая', 'Средняя',
        
        # Multimodal  
        'Критическая', 'Критическая', 'Критическая', 'Высокая',
        'Высокая'
    ],
    
    'Простота_для_Пожилых': [
        # Voice/Audio
        'Очень высокая', 'Очень высокая', 'Высокая', 'Очень высокая',
        'Очень высокая', 'Высокая', 'Очень высокая', 'Высокая',
        'Очень высокая', 'Высокая',
        
        # Camera/Vision
        'Высокая', 'Высокая', 'Средняя', 'Высокая',
        'Средняя', 'Высокая', 'Средняя', 'Высокая',
        'Высокая', 'Высокая',
        
        # Multimodal
        'Высокая', 'Высокая', 'Высокая', 'Средняя',
        'Высокая'
    ],
    
    'Приоритет_HomeBridge': [
        # Voice/Audio
        'Phase 1 (Ядро)', 'Phase 1 (Ядро)', 'Phase 1 (Ядро)', 'Phase 1 (Ядро)',
        'Phase 1 (Ядро)', 'Phase 2 (Развитие)', 'Phase 1 (Ядро)', 'Phase 1 (Ядро)',
        'Phase 1 (Ядро)', 'Phase 2 (Развитие)',
        
        # Camera/Vision
        'Phase 2 (Развитие)', 'Phase 2 (Развитие)', 'Phase 2 (Улучшение)', 'Phase 2 (Безопасность)',
        'Phase 3 (Продвинутое)', 'Phase 3 (Продвинутое)', 'Phase 3 (Продвинутое)', 'Phase 2 (Развитие)',
        'Phase 2 (Безопасность)', 'Phase 3 (Улучшение)',
        
        # Multimodal
        'Phase 1 (Ядро)', 'Phase 2 (Развитие)', 'Phase 2 (Безопасность)', 'Phase 3 (Платформа)',
        'Phase 1 (Ядро)'
    ]
}

df_health_monitoring = pd.DataFrame(health_monitoring_data)

print("=== COMPREHENSIVE HEALTH MONITORING TABLE FOR ELDERLY ===")
print(df_health_monitoring.to_string(index=False))

# Create priority matrix for landing page
landing_page_priorities = df_health_monitoring[
    (df_health_monitoring['Важность_для_Пожилых'].isin(['Критическая', 'Высокая'])) &
    (df_health_monitoring['Простота_для_Пожилых'].isin(['Очень высокая', 'Высокая'])) &
    (df_health_monitoring['Приоритет_HomeBridge'].str.contains('Phase 1'))
].copy()

print(f"\n=== HIGH PRIORITY FOR LANDING PAGE (Phase 1 + High Importance + High Simplicity) ===")
print(f"Found {len(landing_page_priorities)} high-priority parameters:")
for i, row in landing_page_priorities.iterrows():
    print(f"✅ {row['Параметр_Здоровья']} - {row['Точность_Ожидаемая']} точность - {row['Технология_Мониторинга']}")
    
# Save comprehensive table
df_health_monitoring.to_csv('homebridge_elderly_health_parameters_2025.csv', index=False)
print(f"\n✅ Comprehensive table saved as: homebridge_elderly_health_parameters_2025.csv")